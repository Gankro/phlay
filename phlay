#!/usr/bin/env python3

from http.client import HTTPSConnection
from urllib.parse import urlencode, urlparse
from subprocess import check_output
from argparse import ArgumentParser
from pathlib import Path
import sys
import os
import re
import json
import curses


class Style:
    """ANSI color helper"""
    COLORS = 'black blue cyan green magenta red white yellow'.split()
    SUGAR = dict(reset='sgr0', italic='sitm')

    def __init__(self, color, stream=sys.stdout):
        self.styled = color == 'always' or (color == 'auto' and stream.isatty())
        if self.styled:
            curses.setupterm()
            self._setf = curses.tigetstr('setaf') or curses.tigetstr('setf')

    def __getattr__(self, name):
        if not self.styled:
            return ''
        name = self.SUGAR.get(name, name)
        if name in self.COLORS:
            num = getattr(curses, 'COLOR_' + name.upper())
            return curses.tparm(self._setf, num).decode('latin1')
        return curses.tparm(curses.tigetstr(name)).decode('latin1')


class UserError(Exception):
    pass


class Conduit:
    def __init__(self, arcrc_path):
        # Load the global and local Arcanist configuration
        self.top = Path(check_output(['git', 'rev-parse', '--show-toplevel'])
                        .decode().strip())
        with open(self.top / '.arcconfig') as f:
            arcconfig = json.load(f)
        with open(Path(arcrc_path).expanduser()) as f:
            arcrc = json.load(f)

        # Load the URL from the local arcconfig
        self.url = urlparse(arcconfig['phabricator.uri'])
        if self.url.scheme != 'https':
            raise UserError('Only HTTPS scheme phabricator.uri are supported')

        # Find our authentication token
        try:
            self.token = next(data['token'] for url, data in arcrc['hosts'].items()
                              if urlparse(url).netloc == self.url.netloc)
        except:
            raise UserError(f'No token for host {self.url.netloc}')

        # Connect to Conduit to determine our repository's PHID
        self.callsign = arcconfig['repository.callsign']
        self.repository = self.search_one('diffusion.repository', {
            'callsigns': [arcconfig['repository.callsign']]
        })

    def do(self, name, **params):
        # Add the token & write out parameters.
        params['__conduit__'] = { 'token': self.token }
        body = urlencode({
            'params': json.dumps(params),
            'output': 'json',
            '__conduit__': True,
        })

        # Send the POST request
        conn = HTTPSConnection(self.url.netloc)
        conn.request("POST", f'/api/{name}', body=body)

        # Read the response as JSON
        resp = json.load(conn.getresponse())
        if resp['error_code'] is not None:
            raise UserError(f"conduit[{resp['error_code']}]: {resp['error_info']}")
        return resp['result']

    def search_one(self, what, constraints, attachments={}):
        resp = self.do(f'{what}.search',
                       constraints=constraints,
                       attachments=attachments,
                       limit=1)
        if len(resp['data']) != 1:
            raise UserError(f'cannot find {what} (constraints={constraints})')
        return resp['data'][0]


class Cached:
    """single-instance cached object helper"""
    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_cache'):
            cls._cache = {}
        key = cls.key(*args, **kwargs)
        self = cls._cache.get(key, None)
        if self is None:
            self = super().__new__(cls)
            cls._cache[key] = self
            self.init(*args, **kwargs)
        return self

    @classmethod
    def key(cls, *args):
        return tuple(map(str, args))

    def init(self):
        pass


class Revision(Cached):
    _info = None

    def init(self, revid):
        self.revid = int(revid)

    def info(self, conduit):
        if self._info is None:
            self._info = conduit.search_one('differential.revision', {
                'ids': [self.revid]
            }, attachments={ 'reviewers': True })
        return self._info

    def url(self, conduit):
        return f"https://{conduit.url.netloc}/D{self.revid}"


class Bug(Cached):
    _info = None

    def init(self, bugno):
        self.bugno = int(bugno)

    def info(self, _conduit):
        if self._info is None:
            conn = HTTPSConnection('bugzilla.mozilla.org')
            conn.request('GET',
                f"/rest/bug/{self.bugno}?include_fields=summary,status")
            resp = json.load(conn.getresponse())
            if resp.get('error', False):
                raise UserError(resp['message'])
            self._info = resp['bugs'][0]
        return self._info


class User(Cached):
    _info = None

    def init(self, username):
        self.username = username

    def info(self, conduit):
        if self._info is None:
            self._info = conduit.search_one('user', {
                'usernames': [self.username]
            })
        return self._info


class Commit(Cached):
    # Fields pulled from 'git show'
    abbrev          = '%h'
    commit_hash     = '%H'
    tree_hash       = '%T'
    parent_hashes   = '%P'
    author_name     = '%an'
    author_email    = '%ae'
    author_date     = '%aD'
    committer_name  = '%cn'
    committer_email = '%ce'
    committer_date  = '%cD'
    subject         = '%s'
    body            = '%b'
    raw_body        = '%B'

    @classmethod
    def key(cls, rev):
        if re.fullmatch(r'[a-f0-9]{40}', rev, re.I):
            return rev  # If it looks like a full sha1, just return it
        return check_output(['git', 'rev-parse', '--verify', rev]).decode().strip()

    def init(self, rev):
        # XXX(nika): Consider making this part lazy?
        self.transactions = []

        # Read information from 'git show'
        FIELDS = { k: v for k, v in Commit.__dict__.items()
                   if type(v) == str and v.startswith('%') }
        FORMAT = '%x00'.join(FIELDS.values())

        info = check_output(['git', 'show', '-q', f'--format={FORMAT}', rev])
        self.__dict__.update(zip(FIELDS.keys(), info.decode().split('\0')))
        self.parent_hashes = self.parent_hashes.split()

        # Compute more info based on the commit message etc.
        bugmatch = re.search(r'bug\s+(\d+)', self.subject, re.I)
        self.bug = bugmatch and Bug(bugmatch.group(1))

        # Parse the reviewer list
        self.reviewers = []
        for rmatch in re.finditer(r'r((?:[?=,][^,\s]+)+)', self.subject, re.I):
            for name in re.split(r'[?=,]', rmatch.group(1))[1:]:
                self.reviewers.append(User(name))

        # Parse the revision out of body, and strip to store in summary.
        self.revision = None
        def rev_replace(match):
            self.revision = Revision(match.group(2))
            return ""
        self._summary = re.sub(
            r'^Differential\s+Revision:\s*(.*/)?D([0-9]+)$',
            rev_replace, self.body, count=1, flags=re.I | re.M
        ).strip()

    def parent(self):
        if len(self.parent_hashes) == 1:
            return Commit(self.parent_hashes[0])
        return None

    def get_diff(self):
        return check_output([
            'git', 'diff-tree',
            '--no-ext-diff',
            '--no-textconv',
            '--submodule=short',
            '--no-color',
            '--src-prefix=a/',
            '--dst-prefix=b/',
            '-U32767',
            self.commit_hash
        ]).decode()

    def add_transaction(self, type, value):
        self.transactions.append({
            'type': type,
            'value': value,
        })

    def is_part_one(self):
        return self.parent() and self.bug != self.parent().bug

    def summary(self, parent=None, pending_deps=False):
        summary = self._summary
        if not self.is_part_one():
            parent = parent or self.parent()
            if parent.revision:
                revid = parent.revision.revid
            elif pending_deps:
                revid = "<pending>"
            else:
                raise UserError(f"no revision for {parent.abbrev}")
            summary += f"\n\nDepends on D{revid}"
        return summary.strip()

    def recommit(self, parent, message):
        message = message.strip()  # Make sure to clean up trailing whitespace
        if parent == self.parent() and message == self.raw_body.strip():
            return self

        # Set up the commit environment
        env = dict(os.environ)
        env.update(GIT_AUTHOR_NAME=self.author_name,
                   GIT_AUTHOR_EMAIL=self.author_email,
                   GIT_AUTHOR_DATE=self.author_date,
                   GIT_COMMITTER_NAME=self.committer_name,
                   GIT_COMMITTER_EMAIL=self.committer_email,
                   GIT_COMMITTER_DATE=self.committer_date)

        newsha = check_output([
            'git', 'commit-tree',
            '-p', parent.commit_hash,
            self.tree_hash
        ], input=message.encode(), env=env).decode().strip()
        return Commit(newsha)

    def __repr__(self):
        return f'<commit {self.abbrev} {repr(self.subject)}>'


def get_revisions(args):
    # Check our 'ref' argument
    if args.ref != 'HEAD':
        # Limit to '--heads' if no path is provided
        heads = [] if '/' in args.ref else ['--heads']
        lines = check_output(['git', 'show-ref', *heads, args.ref]) \
            .decode().strip().splitlines()
        if len(lines) != 1:
            raise UserError(f'Ambiguous or Unknown ref: {args.ref}')
        ref = lines[0].split()[1]
    else:
        ref = 'HEAD'

    # Determine which commits to reparent vs. push
    if '..' in args.revspec:
        start, end = map(Commit, args.revspec.split('..', 1))
    else:
        end = Commit(args.revspec)
        start = end.parent()

    current = Commit(ref)
    reparent = []
    while current != end:
        if current is None:
            raise UserError(f'{end.abbrev} not direct ancestor of {ref}')
        reparent.append(current)
        current = current.parent()
    reparent.reverse()

    push = []
    while current != start:
        if current is None:
            raise UserError(f'{start.abbrev} not direct ancestor of {end.abbrev}')
        push.append(current)
        current = current.parent()
    push.reverse()

    if len(push) == 0:
        raise UserError('no commits specified')

    return start, ref, push, reparent


def process_args(args):
    # Set up state for arguments
    style = Style(args.color)
    conduit = Conduit(args.arcrc)
    start, ref, push, reparent = get_revisions(args)

    # Stash the current sha1 for |ref|
    initial_ref = Commit(ref)

    # Define a helper for printing styled & labeled information to stdout.
    def label(label, *rest, warn=False):
        color = style.bold + (style.red if warn else style.cyan)
        body = ' '.join(str(s) for s in rest)
        if '\n' in body:
            indent = '\n    '
            body = body.replace('\n', indent)
        else:
            indent = ' ' * (14 - len(label))
        print(f"  {color}{label}{style.reset}{indent}{body}")

    # Validate that everything exists, and show computed info
    for commit in push:
        print(f"{style.yellow}{commit.abbrev}{style.reset} {commit.subject}")

        # Produce an error if no bug # was specified
        if commit.bug is None:
            raise UserError(f"no bug # specified")

        # Determine which revision we're working with
        if commit.revision is None:
            revinfo = {}
            label('Revision', '<<new>>')
        else:
            revinfo = commit.revision.info(conduit)
            label('Revision', commit.revision.url(conduit))
        revfields = revinfo.get('fields', {})

        # Specify which repository we're working with
        oldrepo = revfields.get('repositoryPHID')
        if not oldrepo:
            commit.add_transaction('repositoryPHID', conduit.repository['phid'])
            label('Repository', conduit.repository['fields']['name'])
        elif oldrepo != conduit.repository['phid']:
            raise UserError('specified revision for incorrect repository!')

        # Title Updates
        oldtitle = revfields.get('title')
        if oldtitle != commit.subject:
            commit.add_transaction('title', commit.subject)
            label('Set Title', commit.subject)

        # Summary Generation
        oldsummary = revfields.get('summary')
        summary = commit.summary(pending_deps=commit.parent() in push)
        if oldsummary != summary:
            commit.add_transaction('summary', summary)
            label('Set Summary', summary)

        # Update the Bug #
        buginfo = commit.bug.info(conduit)
        oldbugno = revfields.get('bugzilla.bug-id')
        if oldbugno != str(commit.bug.bugno):
            commit.add_transaction('bugzilla.bug-id', str(commit.bug.bugno))
            label('Set Bug',
                  f"Bug {commit.bug.bugno}",
                  f"{style.bold}[{buginfo['status']}]{style.reset}",
                  f"{style.italic}{buginfo['summary']}{style.reset}")

        # Add any reviewers not in the original commit
        to_add = []
        rev_phids = [
            reviewer['reviewerPHID']
            for reviewer in revinfo.get('attachments', {})
                .get('reviewers', {}).get('reviewers', [])
        ]
        for reviewer in commit.reviewers:
            userinfo = reviewer.info(conduit)
            if userinfo['phid'] not in rev_phids:
                to_add.append(userinfo['phid'])
                label('Add Reviewer',
                      userinfo['fields']['realName'],
                      f"[:{userinfo['fields']['username']}]")
        if len(to_add) > 0:
            commit.add_transaction('reviewers.add', to_add)

        print()

    # Request user confirmation of printed information.
    if not args.assume_yes:
        prompt_response = input(f"{style.bold}Proceed?{style.reset} (Y/n) ")
        if prompt_response.lower() not in ('y', ''):
            raise UserError('user aborted')
        print()

    # Perform the commit rewriting
    parent = start
    for commit in push:
        print(f"{style.yellow}{commit.abbrev}{style.reset} {commit.subject}")

        # Update transactions to reflect parent pushed revIDs
        for txn in commit.transactions:
            if txn['type'] == 'summary':
                txn['value'] = commit.summary(parent=parent)

        # XXX(nika): Use 'differential.creatediff' instead to get full
        # flexibility.
        diff = conduit.do('differential.createrawdiff',
                          diff=commit.get_diff(),
                          repositoryPHID=conduit.repository['phid'])
        label('Diff URI', diff['uri'])
        commit.add_transaction('update', diff['phid'])

        # Send the revision edit request.
        params = { 'transactions': commit.transactions }
        if commit.revision is not None:
            params['objectIdentifier'] = commit.revision.info(conduit)['phid']
        editrv = conduit.do('differential.revision.edit', **params)

        # Get additional information about the newly created revision
        if commit.revision is None:
            revurl = Revision(editrv['object']['id']).url(conduit)
        else:
            revurl = commit.revision.url(conduit)
        label('Revision', revurl)

        # Perform a rewrite of the commit, and move to the next
        commitmsg = commit.raw_body.strip()
        if commit.revision is None:
            commitmsg += f"\n\nDifferential Revision: {revurl}"
        parent = commit.recommit(parent, commitmsg)

    # Reparent remaining commits
    for commit in reparent:
        parent = commit.recommit(parent, commit.raw_body)

    # Rewrite 'ref'
    if initial_ref != parent:
        print(f"{style.bold}Updating {style.yellow}{ref}{style.reset}")
        label('Old Value', initial_ref.commit_hash)
        label('New Value', parent.commit_hash)
        check_output([
            'git', 'update-ref', '-m', 'phlay: rewrite',
            ref, parent.commit_hash, initial_ref.commit_hash,
        ])


def main():
    parser = ArgumentParser(description='phlay commits onto differential')
    parser.add_argument('--ref', '-r', nargs=1, default='HEAD',
                        help='git ref to update after rewriting commits')
    parser.add_argument('--assume-yes', '-y', action='store_true',
                        help='disable confirmation prompts')
    parser.add_argument('--arcrc', nargs=1, default='~/.arcrc',
                        help='arc configuration file')
    parser.add_argument('--color', default='auto',
                        choices=['always', 'never', 'auto'],
                        help='control output colorization')
    parser.add_argument('revspec', nargs='?', default='HEAD',
                        help='commit range to phlay onto differential')
    args = parser.parse_args()

    try:
        process_args(args)
    except UserError as e:
        style = Style(args.color, stream=sys.stderr)
        print(f'{style.red}{style.bold}error{style.reset} {str(e)}',
              file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
